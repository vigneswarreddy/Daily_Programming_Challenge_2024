def evaluate_postfix(expression):
    stack = []
    tokens = expression.split()   
    for token in tokens:
        if token.lstrip('-').isdigit():  
            stack.append(int(token))
        elif token in {'+', '-', '*', '/'}: 
            if len(stack) < 2:  
                raise ValueError("Invalid postfix expression")
            b = stack.pop()
            a = stack.pop()
            if token == '+':
                stack.append(a + b)
            elif token == '-':
                stack.append(a - b)
            elif token == '*':
                stack.append(a * b)
            elif token == '/':
                stack.append(int(a / b))  
        else:
            raise ValueError(f"Unsupported operator: {token}") 
    if len(stack) != 1:
        raise ValueError("Invalid postfix expression")    
    return stack[0]

# Test cases
test_cases = [
    ("2 1 + 3 *", 9),
    ("5 6 +", 11),
    ("-5 6 -", -11),
    ("15 7 1 1 + - / 3 * 2 1 1 + + -", 5),
    ("5", 5)
]

# Running the test cases
for i, (expr, expected) in enumerate(test_cases):
    try:
        result = evaluate_postfix(expr)
        print(f"Test Case {i + 1}: Expression: '{expr}', Expected: {expected}, Result: {result}, Passed: {result == expected}")
    except Exception as e:
        print(f"Test Case {i + 1}: Expression: '{expr}', Error: {e}")

