# Day 28
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
def isSymmetric(root):
    def isMirror(left, right):
        if not left and not right:
            return True
        if not left or not right:
            return False
        return (left.val == right.val and 
                isMirror(left.left, right.right) and 
                isMirror(left.right, right.left))
    if not root:
        return True
    return isMirror(root.left, root.right)

# Example Usage:
# Test Case 1: Symmetric Tree
root1 = TreeNode(1)
root1.left = TreeNode(2, TreeNode(3), TreeNode(4))
root1.right = TreeNode(2, TreeNode(4), TreeNode(3))
print(isSymmetric(root1)) 

# Test Case 2: Not Symmetric
root2 = TreeNode(1)
root2.left = TreeNode(2, None, TreeNode(3))
root2.right = TreeNode(2, None, TreeNode(3))
print(isSymmetric(root2))  

# Test Case 3: Single Node Tree
root3 = TreeNode(1)
print(isSymmetric(root3))  

# Test Case 4: Empty Tree
print(isSymmetric(None))  

# Test Case 5: Not Symmetric with Asymmetric Structure
root5 = TreeNode(1)
root5.left = TreeNode(2, TreeNode(3))
root5.right = TreeNode(2, None, TreeNode(3))
print(isSymmetric(root5))  
