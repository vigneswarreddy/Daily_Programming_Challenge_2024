# Day 27
from collections import deque, defaultdict
def shortest_path_unweighted(V, edges, start, end):
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    queue = deque([(start, 0)])  
    visited = [False] * V
    visited[start] = True
    while queue:
        current_node, distance = queue.popleft()
        if current_node == end:
            return distance
        for neighbor in graph[current_node]:
            if not visited[neighbor]:
                visited[neighbor] = True
                queue.append((neighbor, distance + 1))
    return -1

# Example usage:
# Test Case 1: Path exists
V1 = 5
edges1 = [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4]]
start1 = 0
end1 = 4
print(shortest_path_unweighted(V1, edges1, start1, end1))  

# Test Case 2: Path exists
V2 = 3
edges2 = [[0, 1], [1, 2]]
start2 = 0
end2 = 2
print(shortest_path_unweighted(V2, edges2, start2, end2))  

# Test Case 3: No path
V3 = 4
edges3 = [[0, 1], [1, 2]]
start3 = 2
end3 = 3
print(shortest_path_unweighted(V3, edges3, start3, end3))  

# Test Case 4: Start and end are the same
V4 = 3
edges4 = []
start4 = 0
end4 = 0
print(shortest_path_unweighted(V4, edges4, start4, end4))  
